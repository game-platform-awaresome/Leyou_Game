package com.leyou.game.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CROWD".
*/
public class CrowdDao extends AbstractDao<Crowd, Long> {

    public static final String TABLENAME = "CROWD";

    /**
     * Properties of entity Crowd.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GroupId = new Property(1, String.class, "groupId", false, "GROUP_ID");
        public final static Property GroupNo = new Property(2, String.class, "groupNo", false, "GROUP_NO");
        public final static Property Introduction = new Property(3, String.class, "introduction", false, "INTRODUCTION");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property HeadImgUrl = new Property(5, String.class, "headImgUrl", false, "HEAD_IMG_URL");
        public final static Property MemberNum = new Property(6, Integer.class, "memberNum", false, "MEMBER_NUM");
        public final static Property IsTop = new Property(7, Integer.class, "isTop", false, "IS_TOP");
        public final static Property IsMaster = new Property(8, Integer.class, "isMaster", false, "IS_MASTER");
        public final static Property IsShielding = new Property(9, Integer.class, "isShielding", false, "IS_SHIELDING");
        public final static Property MyName = new Property(10, String.class, "myName", false, "MY_NAME");
    };


    public CrowdDao(DaoConfig config) {
        super(config);
    }

    public CrowdDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CROWD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GROUP_ID\" TEXT," + // 1: groupId
                "\"GROUP_NO\" TEXT," + // 2: groupNo
                "\"INTRODUCTION\" TEXT," + // 3: introduction
                "\"NAME\" TEXT," + // 4: name
                "\"HEAD_IMG_URL\" TEXT," + // 5: headImgUrl
                "\"MEMBER_NUM\" INTEGER," + // 6: memberNum
                "\"IS_TOP\" INTEGER," + // 7: isTop
                "\"IS_MASTER\" INTEGER," + // 8: isMaster
                "\"IS_SHIELDING\" INTEGER," + // 9: isShielding
                "\"MY_NAME\" TEXT);"); // 10: myName
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_CROWD_GROUP_ID ON CROWD" +
                " (\"GROUP_ID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_CROWD_GROUP_NO ON CROWD" +
                " (\"GROUP_NO\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CROWD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Crowd entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(2, groupId);
        }

        String groupNo = entity.getGroupNo();
        if (groupNo != null) {
            stmt.bindString(3, groupNo);
        }

        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(4, introduction);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }

        String headImgUrl = entity.getHeadImgUrl();
        if (headImgUrl != null) {
            stmt.bindString(6, headImgUrl);
        }

        Integer memberNum = entity.getMemberNum();
        if (memberNum != null) {
            stmt.bindLong(7, memberNum);
        }

        Integer isTop = entity.getIsTop();
        if (isTop != null) {
            stmt.bindLong(8, isTop);
        }

        Integer isMaster = entity.getIsMaster();
        if (isMaster != null) {
            stmt.bindLong(9, isMaster);
        }

        Integer isShielding = entity.getIsShielding();
        if (isShielding != null) {
            stmt.bindLong(10, isShielding);
        }

        String myName = entity.getMyName();
        if (myName != null) {
            stmt.bindString(11, myName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Crowd readEntity(Cursor cursor, int offset) {
        Crowd entity = new Crowd( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // groupId
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // groupNo
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // introduction
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // headImgUrl
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // memberNum
                cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // isTop
                cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // isMaster
                cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // isShielding
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // myName
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Crowd entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroupId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroupNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIntroduction(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHeadImgUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMemberNum(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIsTop(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsMaster(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIsShielding(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setMyName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Crowd entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(Crowd entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
