package com.leyou.game.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "FRIEND".
 */
public class FriendDao extends AbstractDao<Friend, Long> {

    public static final String TABLENAME = "FRIEND";

    /**
     * Properties of entity Friend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Status = new Property(1, Integer.class, "status", false, "STATUS");
        public final static Property IdNo = new Property(2, String.class, "idNo", false, "ID_NO");
        public final static Property UserId = new Property(3, String.class, "userId", false, "USER_ID");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property PhoneNameLetter = new Property(5, String.class, "phoneNameLetter", false, "PHONE_NAME_LETTER");
        public final static Property Nickname = new Property(6, String.class, "nickname", false, "NICKNAME");
        public final static Property PictureUrl = new Property(7, String.class, "pictureUrl", false, "PICTURE_URL");
        public final static Property Sex = new Property(8, Integer.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(9, Long.class, "birthday", false, "BIRTHDAY");
        public final static Property Phone = new Property(10, String.class, "phone", false, "PHONE");
        public final static Property PhoneAddress = new Property(11, String.class, "phoneAddress", false, "PHONE_ADDRESS");
        public final static Property RemarkName = new Property(12, String.class, "remarkName", false, "REMARK_NAME");
        public final static Property Source = new Property(13, Integer.class, "source", false, "SOURCE");
        public final static Property Comment = new Property(14, String.class, "comment", false, "COMMENT");
        public final static Property HeadImgUrl = new Property(15, String.class, "headImgUrl", false, "HEAD_IMG_URL");
        public final static Property Region = new Property(16, String.class, "region", false, "REGION");
    }

    ;


    public FriendDao(DaoConfig config) {
        super(config);
    }

    public FriendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STATUS\" INTEGER," + // 1: status
                "\"ID_NO\" TEXT," + // 2: idNo
                "\"USER_ID\" TEXT," + // 3: userId
                "\"NAME\" TEXT," + // 4: name
                "\"PHONE_NAME_LETTER\" TEXT," + // 5: phoneNameLetter
                "\"NICKNAME\" TEXT," + // 6: nickname
                "\"PICTURE_URL\" TEXT," + // 7: pictureUrl
                "\"SEX\" INTEGER," + // 8: sex
                "\"BIRTHDAY\" INTEGER," + // 9: birthday
                "\"PHONE\" TEXT NOT NULL ," + // 10: phone
                "\"PHONE_ADDRESS\" TEXT," + // 11: phoneAddress
                "\"REMARK_NAME\" TEXT," + // 12: remarkName
                "\"SOURCE\" INTEGER," + // 13: source
                "\"COMMENT\" TEXT," + // 14: comment
                "\"HEAD_IMG_URL\" TEXT," + // 15: headImgUrl
                "\"REGION\" TEXT);"); // 16: region
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_FRIEND_STATUS ON FRIEND" +
                " (\"STATUS\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_FRIEND_ID_NO ON FRIEND" +
                " (\"ID_NO\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_FRIEND_USER_ID ON FRIEND" +
                " (\"USER_ID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_FRIEND_PHONE ON FRIEND" +
                " (\"PHONE\");");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Friend entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(2, status);
        }

        String idNo = entity.getIdNo();
        if (idNo != null) {
            stmt.bindString(3, idNo);
        }

        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }

        String phoneNameLetter = entity.getPhoneNameLetter();
        if (phoneNameLetter != null) {
            stmt.bindString(6, phoneNameLetter);
        }

        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(7, nickname);
        }

        String pictureUrl = entity.getPictureUrl();
        if (pictureUrl != null) {
            stmt.bindString(8, pictureUrl);
        }

        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(9, sex);
        }

        Long birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(10, birthday);
        }
        stmt.bindString(11, entity.getPhone());

        String phoneAddress = entity.getPhoneAddress();
        if (phoneAddress != null) {
            stmt.bindString(12, phoneAddress);
        }

        String remarkName = entity.getRemarkName();
        if (remarkName != null) {
            stmt.bindString(13, remarkName);
        }

        Integer source = entity.getSource();
        if (source != null) {
            stmt.bindLong(14, source);
        }

        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(15, comment);
        }

        String headImgUrl = entity.getHeadImgUrl();
        if (headImgUrl != null) {
            stmt.bindString(16, headImgUrl);
        }

        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(17, region);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Friend readEntity(Cursor cursor, int offset) {
        Friend entity = new Friend( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // status
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // idNo
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userId
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phoneNameLetter
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nickname
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pictureUrl
                cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // sex
                cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // birthday
                cursor.getString(offset + 10), // phone
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // phoneAddress
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // remarkName
                cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // source
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // comment
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // headImgUrl
                cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // region
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Friend entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatus(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIdNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhoneNameLetter(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNickname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPictureUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSex(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setBirthday(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setPhone(cursor.getString(offset + 10));
        entity.setPhoneAddress(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRemarkName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSource(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setComment(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setHeadImgUrl(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRegion(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Friend entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Friend entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
