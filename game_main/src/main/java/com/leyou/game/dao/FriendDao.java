package com.leyou.game.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.leyou.game.dao.Friend;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND".
*/
public class FriendDao extends AbstractDao<Friend, Long> {

    public static final String TABLENAME = "FRIEND";

    /**
     * Properties of entity Friend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Status = new Property(1, Integer.class, "status", false, "STATUS");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property PhoneNameLetter = new Property(4, String.class, "phoneNameLetter", false, "PHONE_NAME_LETTER");
        public final static Property Nickname = new Property(5, String.class, "nickname", false, "NICKNAME");
        public final static Property PictureUrl = new Property(6, String.class, "pictureUrl", false, "PICTURE_URL");
        public final static Property Sex = new Property(7, Integer.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(8, Long.class, "birthday", false, "BIRTHDAY");
        public final static Property Phone = new Property(9, String.class, "phone", false, "PHONE");
        public final static Property PhoneAddress = new Property(10, String.class, "phoneAddress", false, "PHONE_ADDRESS");
        public final static Property RemarkName = new Property(11, String.class, "remarkName", false, "REMARK_NAME");
        public final static Property Source = new Property(12, Integer.class, "source", false, "SOURCE");
    };


    public FriendDao(DaoConfig config) {
        super(config);
    }
    
    public FriendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STATUS\" INTEGER," + // 1: status
                "\"USER_ID\" TEXT," + // 2: userId
                "\"NAME\" TEXT," + // 3: name
                "\"PHONE_NAME_LETTER\" TEXT," + // 4: phoneNameLetter
                "\"NICKNAME\" TEXT," + // 5: nickname
                "\"PICTURE_URL\" TEXT," + // 6: pictureUrl
                "\"SEX\" INTEGER," + // 7: sex
                "\"BIRTHDAY\" INTEGER," + // 8: birthday
                "\"PHONE\" TEXT NOT NULL ," + // 9: phone
                "\"PHONE_ADDRESS\" TEXT," + // 10: phoneAddress
                "\"REMARK_NAME\" TEXT," + // 11: remarkName
                "\"SOURCE\" INTEGER);"); // 12: source
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_FRIEND_STATUS ON FRIEND" +
                " (\"STATUS\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_FRIEND_USER_ID ON FRIEND" +
                " (\"USER_ID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_FRIEND_PHONE ON FRIEND" +
                " (\"PHONE\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Friend entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(2, status);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String phoneNameLetter = entity.getPhoneNameLetter();
        if (phoneNameLetter != null) {
            stmt.bindString(5, phoneNameLetter);
        }
 
        String nickname = entity.getNickName();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
 
        String pictureUrl = entity.getPictureUrl();
        if (pictureUrl != null) {
            stmt.bindString(7, pictureUrl);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(8, sex);
        }
 
        Long birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(9, birthday);
        }
        stmt.bindString(10, entity.getPhone());
 
        String phoneAddress = entity.getPhoneAddress();
        if (phoneAddress != null) {
            stmt.bindString(11, phoneAddress);
        }
 
        String remarkName = entity.getRemarkName();
        if (remarkName != null) {
            stmt.bindString(12, remarkName);
        }
 
        Integer source = entity.getSource();
        if (source != null) {
            stmt.bindLong(13, source);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Friend readEntity(Cursor cursor, int offset) {
        Friend entity = new Friend( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // status
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phoneNameLetter
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pictureUrl
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // sex
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // birthday
            cursor.getString(offset + 9), // phone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // phoneAddress
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // remarkName
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // source
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Friend entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatus(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhoneNameLetter(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNickName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPictureUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setBirthday(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setPhone(cursor.getString(offset + 9));
        entity.setPhoneAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRemarkName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSource(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Friend entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Friend entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
