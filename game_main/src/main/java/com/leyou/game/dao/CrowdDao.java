package com.leyou.game.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.leyou.game.dao.Crowd;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CROWD".
*/
public class CrowdDao extends AbstractDao<Crowd, Long> {

    public static final String TABLENAME = "CROWD";

    /**
     * Properties of entity Crowd.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CrowdId = new Property(1, String.class, "crowdId", false, "CROWD_ID");
        public final static Property CrowdName = new Property(2, String.class, "crowdName", false, "CROWD_NAME");
        public final static Property PictureUrl = new Property(3, String.class, "pictureUrl", false, "PICTURE_URL");
        public final static Property CrowdNumbers = new Property(4, Integer.class, "crowdNumbers", false, "CROWD_NUMBERS");
        public final static Property Top = new Property(5, Integer.class, "top", false, "TOP");
        public final static Property Status = new Property(6, Integer.class, "status", false, "STATUS");
        public final static Property ListenMessage = new Property(7, Integer.class, "listenMessage", false, "LISTEN_MESSAGE");
        public final static Property MyName = new Property(8, String.class, "myName", false, "MY_NAME");
    };


    public CrowdDao(DaoConfig config) {
        super(config);
    }
    
    public CrowdDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CROWD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CROWD_ID\" TEXT," + // 1: crowdId
                "\"CROWD_NAME\" TEXT," + // 2: crowdName
                "\"PICTURE_URL\" TEXT," + // 3: pictureUrl
                "\"CROWD_NUMBERS\" INTEGER," + // 4: crowdNumbers
                "\"TOP\" INTEGER," + // 5: top
                "\"STATUS\" INTEGER," + // 6: status
                "\"LISTEN_MESSAGE\" INTEGER," + // 7: listenMessage
                "\"MY_NAME\" TEXT);"); // 8: myName
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_CROWD_CROWD_ID ON CROWD" +
                " (\"CROWD_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CROWD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Crowd entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String crowdId = entity.getCrowdId();
        if (crowdId != null) {
            stmt.bindString(2, crowdId);
        }
 
        String crowdName = entity.getCrowdName();
        if (crowdName != null) {
            stmt.bindString(3, crowdName);
        }
 
        String pictureUrl = entity.getPictureUrl();
        if (pictureUrl != null) {
            stmt.bindString(4, pictureUrl);
        }
 
        Integer crowdNumbers = entity.getCrowdNumbers();
        if (crowdNumbers != null) {
            stmt.bindLong(5, crowdNumbers);
        }
 
        Integer top = entity.getTop();
        if (top != null) {
            stmt.bindLong(6, top);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(7, status);
        }
 
        Integer listenMessage = entity.getListenMessage();
        if (listenMessage != null) {
            stmt.bindLong(8, listenMessage);
        }
 
        String myName = entity.getMyName();
        if (myName != null) {
            stmt.bindString(9, myName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Crowd readEntity(Cursor cursor, int offset) {
        Crowd entity = new Crowd( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // crowdId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // crowdName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pictureUrl
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // crowdNumbers
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // top
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // listenMessage
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // myName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Crowd entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCrowdId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCrowdName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPictureUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCrowdNumbers(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTop(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setListenMessage(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setMyName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Crowd entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Crowd entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
